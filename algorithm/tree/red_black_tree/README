红黑树
红黑树(red-black tree)是一种自平衡二叉查找树，典型用途是实现关联数组。
红黑树结构复杂，但它的操作有着良好的最坏情况运行时间，并且在实践中高效：
可以在O(logn)时间内完成查找、插入和删除。

-------------------------------------------------------------------------------
和二叉平衡树的区别：
1. 红黑树放弃了追求完全平衡，追求大致平衡，在与平衡二叉树的时间复杂度相差不大
   的情况下，保证每次插入最多只需要三次旋转就能达到平衡，实现起来也更为简单。
2、平衡二叉树追求绝对平衡，条件比较苛刻，实现起来比较麻烦，每次插入新节点之后
   需要旋转的次数不能预知。

-------------------------------------------------------------------------------
性质：
1. 结点是红色或黑色；
2. 根结点是黑色；
3. 所有叶子结点都是黑色；(叶子是NIL结点)
4. 每个红色结点必须有两个黑色的子结点；即从每个叶子到根的所有路径上不能有两个
   连续的红色结点。
5. 从任一结点到其每个叶子的所有简单路径都包含相同数目的黑色结点。

+-----------------------------------------------------------+
|                        insert                             |
|-----------------------------------------------------------|
| case | parent_color | uncle_color | position |   action   |
|  1   |     black    |      *      |     *    |     -      |
|  2   |     red      |     red     |     *    |  cC && ↑   |
|  3   |     red      |    black    | ll <= lr |  rR && cC  | 
|  4   |     red      |    black    | rl => rr |  lR && cC  |
|-----------------------------------------------------------|
|  ll: parent == grandp->left && node == parent->left       |
|  =>: 转化为指向的状态                                     |
|  rR:左旋  lR:右旋  cC:改变颜色  ↑:向上迭代                |
+-----------------------------------------------------------+


+-------------------------------------------------------------------------+
|                delete算法导论RB-DELETE-FIXUP(T, x)                      |
|-------------------------------------------------------------------------|
|while x ≠ root[T] and color[x] = BLACK                                   |
|    do if x = left[p[x]]                                                 |
|          then w ← right[p[x]]                                           |
|               if color[w] = RED                                         |
|                  then color[w] ← BLACK                           Case 1 |
|                       color[p[x]] ← RED                          Case 1 |
|                       LEFT-ROTATE(T, p[x])                       Case 1 |
|                       w ← right[p[x]]                            Case 1 |
|               if color[left[w]] = BLACK and color[right[w]] = BLACK     |
|                   then color[w] ← RED                            Case 2 |
|                        x ← p[x]                                  Case 2 |
|                   else if color[right[w]] = BLACK                       |
|                           then color[left[w]] ← BLACK            Case 3 | 
|                                color[w] ← RED                    Case 3 | 
|                                RIGHT-ROTATE(T, w)                Case 3 | 
|                                w ← right[p[x]]                   Case 3 | 
|                         color[w] ← color[p[x]]                   Case 4 | 
|                         color[p[x]] ← BLACK                      Case 4 | 
|                         color[right[w]] ← BLACK                  Case 4 | 
|                         LEFT-ROTATE(T, p[x])                     Case 4 | 
|                         x ← root[T]                              Case 4 | 
|        else (same as then clause with "right" and "left" exchanged)     |
|color[x] ← BLACK                                                         |
+-------------------------------------------------------------------------+
